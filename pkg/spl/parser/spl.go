// Code generated by goyacc -o spl.go -p spl -v spl.output spl.y. DO NOT EDIT.

//line spl.y:2

package parser

import __yyfmt__ "fmt"

//line spl.y:3

import (
	"github.com/matrixorigin/nexus/pkg/container/types"
	"github.com/matrixorigin/nexus/pkg/spl/tree"
	"go/constant"
)

//line spl.y:14

type splSymUnion struct {
	val any
	ss  *tree.Select
}

func (u *splSymUnion) SelectStatement() *tree.Select {
	if u.ss == nil {
		u.ss = new(tree.Select)
	}
	return u.ss
}

func (u *splSymUnion) FromStatement() *tree.From {
	return u.val.(*tree.From)
}

func (u *splSymUnion) LimitStatement() *tree.Limit {
	return u.val.(*tree.Limit)
}

func (u *splSymUnion) OrderStatement() *tree.OrderBy {
	return u.val.(*tree.OrderBy)
}

func (u *splSymUnion) StatsStatement() *tree.Stats {
	return u.val.(*tree.Stats)
}

func (u *splSymUnion) WhereStatement() *tree.Where {
	return u.val.(*tree.Where)
}

func (u *splSymUnion) FieldsStatement() *tree.Fields {
	return u.val.(*tree.Fields)
}

func (u *splSymUnion) EvalStatement() *tree.Eval {
	return u.val.(*tree.Eval)
}

func (u *splSymUnion) JoinStatement() *tree.Join {
	return u.val.(*tree.Join)
}

func (u *splSymUnion) SearchStatement() *tree.Search {
	return u.val.(*tree.Search)
}

func (u *splSymUnion) searchTime() *tree.SearchTime {
	return u.val.(*tree.SearchTime)
}

func (u *splSymUnion) evalExprStatement() tree.EvalExpr {
	return u.val.(tree.EvalExpr)
}

func (u *splSymUnion) evalExprListStatement() tree.EvalExprList {
	return u.val.(tree.EvalExprList)
}

func (u *splSymUnion) exprStatement() tree.ExprStatement {
	return u.val.(tree.ExprStatement)
}

func (u *splSymUnion) exprStatements() tree.ExprStatements {
	return u.val.(tree.ExprStatements)
}

func (u *splSymUnion) valueStatement() *tree.Value {
	return u.val.(*tree.Value)
}

func (u *splSymUnion) statStatement() tree.Stat {
	return u.val.(tree.Stat)
}

func (u *splSymUnion) statListStatement() tree.StatList {
	return u.val.(tree.StatList)
}

func (u *splSymUnion) funcStatement() *tree.FuncExpr {
	return u.val.(*tree.FuncExpr)
}

func (u *splSymUnion) orderListStatement() tree.OrderList {
	return u.val.(tree.OrderList)
}

func (u *splSymUnion) orderStatement() *tree.Order {
	return u.val.(*tree.Order)
}

func (u *splSymUnion) direction() tree.Direction {
	return u.val.(tree.Direction)
}

func (u *splSymUnion) typeExpr() *tree.TypeExpr {
	return u.val.(*tree.TypeExpr)
}

func (u *splSymUnion) tableName() *tree.TableName {
	return u.val.(*tree.TableName)
}

func (u *splSymUnion) colunmName() tree.ColunmName {
	return u.val.(tree.ColunmName)
}

func (u *splSymUnion) colunmNameList() tree.ColunmNameList {
	return u.val.(tree.ColunmNameList)
}

func (u *splSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}

func (u *splSymUnion) setNegative() *tree.Value {
	v, ok := u.val.(*tree.Value)
	if !ok {
		return nil
	}
	iv, _ := constant.Int64Val(v.Value)
	v.Value = constant.MakeInt64(-1 * iv)
	return v
}

//line spl.y:188
type splSymType struct {
	yys   int
	id    int32
	pos   int32
	byt   byte
	str   string
	union splSymUnion
}

const IDENT = 57346
const ICONST = 57347
const FCONST = 57348
const SCONST = 57349
const LESS_EQUALS = 57350
const GREATER_EQUALS = 57351
const NOT_EQUALS = 57352
const AND = 57353
const AS = 57354
const ASC = 57355
const BOOL = 57356
const BY = 57357
const CAST = 57358
const DESC = 57359
const DOUBLE = 57360
const END = 57361
const EVAL = 57362
const FIELDS = 57363
const FALSE = 57364
const FLOAT = 57365
const INT = 57366
const JOIN = 57367
const LIMIT = 57368
const LONG = 57369
const NOT = 57370
const OR = 57371
const ORDER = 57372
const FROM = 57373
const START = 57374
const STATS = 57375
const STRING = 57376
const SEARCH = 57377
const STARTTIME = 57378
const ENDTIME = 57379
const TRUE = 57380
const TYPE = 57381
const WHERE = 57382

var splToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"ICONST",
	"FCONST",
	"SCONST",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"AND",
	"AS",
	"ASC",
	"BOOL",
	"BY",
	"CAST",
	"DESC",
	"DOUBLE",
	"END",
	"EVAL",
	"FIELDS",
	"FALSE",
	"FLOAT",
	"INT",
	"JOIN",
	"LIMIT",
	"LONG",
	"NOT",
	"OR",
	"ORDER",
	"FROM",
	"START",
	"STATS",
	"STRING",
	"SEARCH",
	"STARTTIME",
	"ENDTIME",
	"TRUE",
	"TYPE",
	"WHERE",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'<'",
	"'>'",
	"'='",
	"'('",
	"')'",
	"'|'",
	"':'",
	"'['",
	"']'",
	"','",
}

var splStatenames = [...]string{}

const splEofCode = 1
const splErrCode = 2
const splInitialStackSize = 16

//line spl.y:582

//line yacctab:1
var splExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	49, 97,
	-2, 95,
}

const splPrivate = 57344

const splLast = 229

var splAct = [...]uint8{
	53, 76, 105, 39, 3, 75, 100, 113, 56, 150,
	58, 27, 36, 71, 149, 24, 28, 44, 106, 38,
	100, 61, 62, 61, 70, 79, 23, 37, 2, 25,
	47, 48, 49, 66, 61, 99, 23, 167, 60, 153,
	60, 57, 147, 98, 81, 84, 42, 51, 165, 25,
	108, 77, 104, 41, 103, 83, 97, 72, 152, 154,
	61, 78, 115, 50, 102, 80, 116, 45, 61, 25,
	101, 61, 28, 82, 52, 136, 112, 60, 107, 61,
	61, 38, 120, 111, 117, 60, 122, 123, 110, 37,
	118, 30, 96, 119, 135, 121, 77, 60, 87, 88,
	89, 61, 138, 139, 141, 142, 83, 59, 25, 145,
	144, 143, 83, 151, 61, 146, 74, 148, 140, 85,
	86, 87, 88, 89, 82, 83, 4, 31, 32, 73,
	82, 77, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 68, 25, 47, 48, 49, 25, 155,
	69, 25, 46, 156, 55, 166, 57, 93, 94, 95,
	54, 29, 51, 63, 12, 157, 168, 158, 41, 25,
	47, 48, 49, 35, 43, 40, 137, 109, 50, 34,
	26, 57, 45, 64, 65, 114, 67, 51, 30, 52,
	85, 86, 87, 88, 89, 90, 91, 92, 33, 13,
	15, 20, 11, 50, 10, 22, 16, 45, 161, 9,
	17, 14, 163, 18, 52, 21, 8, 162, 159, 7,
	19, 160, 6, 5, 31, 32, 1, 0, 164,
}

var splPact = [...]int16{
	-23, -1000, 180, -25, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 144, 144, 86, 183, 144, 140,
	65, 147, 104, 180, -28, -1000, -42, -1000, 9, -1000,
	-1000, 124, 111, 144, 46, 10, -1000, -5, -1000, 95,
	-1000, 140, 149, -1000, -1000, 165, -1000, -1000, -1000, -1000,
	-1000, -1000, 140, -1000, -1000, -1000, -6, -14, -49, 144,
	-1000, -1000, -1000, 144, 6, 4, -35, 144, 2, -1000,
	144, 144, 140, -1000, -1000, -48, -1000, 49, 144, 144,
	144, 45, 140, 140, -1000, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 55, 44, 25, 140,
	144, -49, -1000, 144, 144, -1000, 180, -35, 144, -1000,
	-1000, -1000, 95, 144, -1000, -1000, -1000, -48, -49, -1000,
	-8, 105, 114, -1000, 55, 55, -1000, -1000, -1000, 78,
	78, 78, 78, 78, 78, -1000, -1000, -41, 95, 101,
	-1000, 21, -1000, -15, -1000, -1000, -1000, 47, 144, 140,
	-1000, 194, 0, -1000, 144, -1000, 95, -13, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 144, -1000, -1000, -1000,
}

var splPgo = [...]uint8{
	0, 226, 4, 126, 223, 222, 219, 216, 209, 204,
	202, 2, 199, 186, 185, 180, 11, 0, 8, 177,
	17, 10, 5, 176, 3, 46, 175, 174, 1, 173,
	12, 167, 165, 161, 164, 163, 160, 154, 152,
}

var splR1 = [...]int8{
	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 11, 4, 34, 34, 34, 34, 35,
	35, 35, 5, 9, 6, 10, 10, 8, 8, 12,
	12, 13, 15, 15, 16, 29, 29, 30, 30, 30,
	30, 7, 7, 22, 22, 28, 14, 14, 14, 23,
	23, 24, 24, 24, 24, 24, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 26, 26, 26, 26, 26,
	26, 27, 27, 27, 27, 27, 27, 33, 33, 33,
	38, 38, 36, 36, 37, 32, 31, 31, 31, 31,
	31, 31, 21, 21, 19, 20, 17, 18,
}

var splR2 = [...]int8{
	0, 2, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 4, 1, 2, 2, 3, 3,
	3, 6, 2, 2, 2, 2, 3, 2, 4, 3,
	4, 3, 1, 3, 3, 1, 3, 6, 5, 3,
	4, 3, 4, 1, 3, 2, 1, 1, 0, 1,
	3, 1, 2, 3, 3, 1, 1, 1, 2, 3,
	3, 3, 3, 3, 1, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 3, 1, 2, 2,
	1, 1, 3, 4, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1,
}

var splChk = [...]int16{
	-1000, -1, 51, -2, -3, -4, -5, -6, -7, -8,
	-9, -10, -34, -12, 31, 20, 26, 30, 33, 40,
	21, 35, 25, 51, -17, 4, -15, -16, -17, -33,
	5, 41, 42, 15, -33, -29, -30, -18, -17, -24,
	-26, 28, -25, -27, -20, 42, -38, 5, 6, 7,
	38, 22, 49, -17, -36, -37, -18, 16, -21, 42,
	-20, -17, -17, -35, 36, 37, -21, -13, 39, -3,
	52, 55, 48, 5, 5, -22, -28, -20, 15, 15,
	55, 49, 29, 11, -24, 41, 42, 43, 44, 45,
	46, 47, 48, 8, 9, 10, -25, -24, 49, 49,
	55, -21, -17, 48, 48, -11, 53, -21, 48, -19,
	-20, -16, -24, 55, -14, 13, 17, -22, -21, -30,
	-17, 50, -24, -24, -25, -25, -25, -25, -25, -25,
	-25, -25, -25, -25, -25, 50, 50, -23, -24, -24,
	-20, -17, -17, -2, -11, -17, -28, 50, 12, 55,
	50, 12, 37, 54, 12, -17, -24, -32, -31, 24,
	27, 14, 23, 18, 34, 48, -17, 50, -17,
}

var splDef = [...]int8{
	0, -2, 0, 1, 2, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 0, 0, 0, 0, 0, 0,
	0, 15, 0, 0, 0, 96, 22, 32, 0, 24,
	77, 0, 0, 0, 0, 27, 35, 0, 97, 23,
	51, 0, 55, 56, 57, 0, 64, 71, 72, 73,
	74, 75, 0, -2, 80, 81, 0, 0, 25, 0,
	92, 95, 16, 17, 0, 0, 0, 0, 0, 3,
	0, 0, 0, 78, 79, 41, 43, 48, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 26, 18, 0, 0, 29, 0, 0, 0, 14,
	94, 33, 34, 0, 45, 46, 47, 42, 28, 36,
	0, 39, 53, 54, 59, 60, 61, 62, 63, 65,
	66, 67, 68, 69, 70, 76, 82, 0, 49, 0,
	93, 19, 20, 0, 30, 31, 44, 40, 0, 0,
	83, 0, 0, 13, 0, 38, 50, 0, 85, 86,
	87, 88, 89, 90, 91, 0, 37, 84, 21,
}

var splTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 45, 3, 3,
	49, 50, 43, 41, 55, 42, 3, 44, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 52, 3,
	46, 48, 47, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 53, 3, 54, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 51,
}

var splTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40,
}

var splTok3 = [...]int8{
	0,
}

var splErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	splDebug        = 0
	splErrorVerbose = false
)

type splLexer interface {
	Lex(lval *splSymType) int
	Error(s string)
}

type splParser interface {
	Parse(splLexer) int
	Lookahead() int
}

type splParserImpl struct {
	lval  splSymType
	stack [splInitialStackSize]splSymType
	char  int
}

func (p *splParserImpl) Lookahead() int {
	return p.char
}

func splNewParser() splParser {
	return &splParserImpl{}
}

const splFlag = -1000

func splTokname(c int) string {
	if c >= 1 && c-1 < len(splToknames) {
		if splToknames[c-1] != "" {
			return splToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func splStatname(s int) string {
	if s >= 0 && s < len(splStatenames) {
		if splStatenames[s] != "" {
			return splStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func splErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !splErrorVerbose {
		return "syntax error"
	}

	for _, e := range splErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + splTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(splPact[state])
	for tok := TOKSTART; tok-1 < len(splToknames); tok++ {
		if n := base + tok; n >= 0 && n < splLast && int(splChk[int(splAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if splDef[state] == -2 {
		i := 0
		for splExca[i] != -1 || int(splExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; splExca[i] >= 0; i += 2 {
			tok := int(splExca[i])
			if tok < TOKSTART || splExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if splExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += splTokname(tok)
	}
	return res
}

func spllex1(lex splLexer, lval *splSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(splTok1[0])
		goto out
	}
	if char < len(splTok1) {
		token = int(splTok1[char])
		goto out
	}
	if char >= splPrivate {
		if char < splPrivate+len(splTok2) {
			token = int(splTok2[char-splPrivate])
			goto out
		}
	}
	for i := 0; i < len(splTok3); i += 2 {
		token = int(splTok3[i+0])
		if token == char {
			token = int(splTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(splTok2[1]) /* unknown char */
	}
	if splDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", splTokname(token), uint(char))
	}
	return char, token
}

func splParse(spllex splLexer) int {
	return splNewParser().Parse(spllex)
}

func (splrcvr *splParserImpl) Parse(spllex splLexer) int {
	var spln int
	var splVAL splSymType
	var splDollar []splSymType
	_ = splDollar // silence set and not used
	splS := splrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	splstate := 0
	splrcvr.char = -1
	spltoken := -1 // splrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		splstate = -1
		splrcvr.char = -1
		spltoken = -1
	}()
	splp := -1
	goto splstack

ret0:
	return 0

ret1:
	return 1

splstack:
	/* put a state and value onto the stack */
	if splDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", splTokname(spltoken), splStatname(splstate))
	}

	splp++
	if splp >= len(splS) {
		nyys := make([]splSymType, len(splS)*2)
		copy(nyys, splS)
		splS = nyys
	}
	splS[splp] = splVAL
	splS[splp].yys = splstate

splnewstate:
	spln = int(splPact[splstate])
	if spln <= splFlag {
		goto spldefault /* simple state */
	}
	if splrcvr.char < 0 {
		splrcvr.char, spltoken = spllex1(spllex, &splrcvr.lval)
	}
	spln += spltoken
	if spln < 0 || spln >= splLast {
		goto spldefault
	}
	spln = int(splAct[spln])
	if int(splChk[spln]) == spltoken { /* valid shift */
		splrcvr.char = -1
		spltoken = -1
		splVAL = splrcvr.lval
		splstate = spln
		if Errflag > 0 {
			Errflag--
		}
		goto splstack
	}

spldefault:
	/* default state action */
	spln = int(splDef[splstate])
	if spln == -2 {
		if splrcvr.char < 0 {
			splrcvr.char, spltoken = spllex1(spllex, &splrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if splExca[xi+0] == -1 && int(splExca[xi+1]) == splstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			spln = int(splExca[xi+0])
			if spln < 0 || spln == spltoken {
				break
			}
		}
		spln = int(splExca[xi+1])
		if spln < 0 {
			goto ret0
		}
	}
	if spln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			spllex.Error(splErrorMessage(splstate, spltoken))
			Nerrs++
			if splDebug >= 1 {
				__yyfmt__.Printf("%s", splStatname(splstate))
				__yyfmt__.Printf(" saw %s\n", splTokname(spltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for splp >= 0 {
				spln = int(splPact[splS[splp].yys]) + splErrCode
				if spln >= 0 && spln < splLast {
					splstate = int(splAct[spln]) /* simulate a shift of "error" */
					if int(splChk[splstate]) == splErrCode {
						goto splstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if splDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", splS[splp].yys)
				}
				splp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if splDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", splTokname(spltoken))
			}
			if spltoken == splEofCode {
				goto ret1
			}
			splrcvr.char = -1
			spltoken = -1
			goto splnewstate /* try again in the same state */
		}
	}

	/* reduction by production spln */
	if splDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", spln, splStatname(splstate))
	}

	splnt := spln
	splpt := splp
	_ = splpt // guard against "declared and not used"

	splp -= int(splR2[spln])
	// splp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if splp+1 >= len(splS) {
		nyys := make([]splSymType, len(splS)*2)
		copy(nyys, splS)
		splS = nyys
	}
	splVAL = splS[splp+1]

	/* consult goto table to find next state */
	spln = int(splR1[spln])
	splg := int(splPgo[spln])
	splj := splg + splS[splp].yys + 1

	if splj >= splLast {
		splstate = int(splAct[splg])
	} else {
		splstate = int(splAct[splj])
		if int(splChk[splstate]) != -spln {
			splstate = int(splAct[splg])
		}
	}
	// dummy call; replaced with literal code
	switch splnt {

	case 1:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:252
		{
			spllex.(*lexer).SetStmt(splDollar[2].union.SelectStatement())
		}
	case 2:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:257
		{
			splVAL.union.val = splDollar[1].union.SelectStatement()
		}
	case 3:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:261
		{
			as, bs := splDollar[1].union.SelectStatement(), splDollar[3].union.SelectStatement()
			as.Cs = append(as.Cs, bs.Cs...)
			splVAL.union.val = as
		}
	case 4:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:268
		{
			ss := splVAL.union.SelectStatement()
			ss.Cs = append(ss.Cs, splDollar[1].union.FromStatement())
		}
	case 5:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:273
		{
			ss := splVAL.union.SelectStatement()
			ss.Cs = append(ss.Cs, splDollar[1].union.EvalStatement())
		}
	case 6:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:278
		{
			ss := splVAL.union.SelectStatement()
			ss.Cs = append(ss.Cs, splDollar[1].union.LimitStatement())
		}
	case 7:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:283
		{
			ss := splVAL.union.SelectStatement()
			ss.Cs = append(ss.Cs, splDollar[1].union.OrderStatement())
		}
	case 8:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:288
		{
			ss := splVAL.union.SelectStatement()
			ss.Cs = append(ss.Cs, splDollar[1].union.StatsStatement())
		}
	case 9:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:293
		{
			ss := splVAL.union.SelectStatement()
			ss.Cs = append(ss.Cs, splDollar[1].union.WhereStatement())
		}
	case 10:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:298
		{
			ss := splVAL.union.SelectStatement()
			ss.Cs = append(ss.Cs, splDollar[1].union.FieldsStatement())
		}
	case 11:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:303
		{
			ss := splVAL.union.SelectStatement()
			ss.Cs = append(ss.Cs, splDollar[1].union.SearchStatement())
		}
	case 12:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:308
		{
			ss := splVAL.union.SelectStatement()
			lv := splDollar[1].union.JoinStatement()
			lv.Left = ss
			s := new(tree.Select)
			s.Cs = append(s.Cs, lv)
			splVAL.union.val = s
		}
	case 13:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:318
		{
			splVAL.union.val = splDollar[2].union.SelectStatement()
		}
	case 14:
		splDollar = splS[splpt-4 : splpt+1]
//line spl.y:323
		{
			splVAL.union.val = &tree.From{N: splDollar[4].union.tableName()}
		}
	case 15:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:328
		{
			splVAL.union.val = &tree.Search{}
		}
	case 16:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:332
		{
			splVAL.union.val = &tree.Search{
				Expr: splDollar[2].str,
			}
		}
	case 17:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:338
		{
			splVAL.union.val = &tree.Search{
				Time: splDollar[2].union.searchTime(),
			}
		}
	case 18:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:344
		{
			splVAL.union.val = &tree.Search{
				Expr: splDollar[3].str,
				Time: splDollar[2].union.searchTime(),
			}
		}
	case 19:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:352
		{
			splVAL.union.val = &tree.SearchTime{
				Start: splDollar[3].str,
			}
		}
	case 20:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:358
		{
			splVAL.union.val = &tree.SearchTime{
				End: splDollar[3].str,
			}
		}
	case 21:
		splDollar = splS[splpt-6 : splpt+1]
//line spl.y:364
		{
			splVAL.union.val = &tree.SearchTime{
				Start: splDollar[1].str,
				End:   splDollar[3].str,
			}
		}
	case 22:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:372
		{
			splVAL.union.val = &tree.Eval{splDollar[2].union.evalExprListStatement()}
		}
	case 23:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:377
		{
			splVAL.union.val = &tree.Where{splDollar[2].union.exprStatement()}
		}
	case 24:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:382
		{
			splVAL.union.val = &tree.Limit{Count: splDollar[2].union.valueStatement()}
		}
	case 25:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:387
		{
			splVAL.union.val = &tree.Fields{Es: splDollar[2].union.colunmNameList()}
		}
	case 26:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:391
		{
			splVAL.union.val = &tree.Fields{Neg: true, Es: splDollar[3].union.colunmNameList()}
		}
	case 27:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:396
		{
			splVAL.union.val = &tree.Stats{Ss: splDollar[2].union.statListStatement()}
		}
	case 28:
		splDollar = splS[splpt-4 : splpt+1]
//line spl.y:400
		{
			splVAL.union.val = &tree.Stats{Ss: splDollar[2].union.statListStatement(), By: splDollar[4].union.colunmNameList()}
		}
	case 29:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:405
		{
			splVAL.union.val = &tree.Join{JoinType: "inner", Fileds: splDollar[2].union.colunmNameList(), Right: splDollar[3].union.SelectStatement()}
		}
	case 30:
		splDollar = splS[splpt-4 : splpt+1]
//line spl.y:409
		{
			splVAL.union.val = &tree.Join{JoinType: splDollar[2].union.val.(string), Fileds: splDollar[3].union.colunmNameList(), Right: splDollar[4].union.SelectStatement()}
		}
	case 31:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:414
		{
			splVAL.union.val = splDollar[2].byt
		}
	case 32:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:419
		{
			splVAL.union.val = tree.EvalExprList{splDollar[1].union.evalExprStatement()}
		}
	case 33:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:423
		{
			splVAL.union.val = append(splDollar[1].union.evalExprListStatement(), splDollar[3].union.evalExprStatement())
		}
	case 34:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:428
		{
			splVAL.union.val = tree.EvalExpr{As: tree.Name(splDollar[1].str), E: splDollar[3].union.exprStatement()}
		}
	case 35:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:433
		{
			splVAL.union.val = tree.StatList{splDollar[1].union.statStatement()}
		}
	case 36:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:437
		{
			splVAL.union.val = append(splDollar[1].union.statListStatement(), splDollar[3].union.statStatement())
		}
	case 37:
		splDollar = splS[splpt-6 : splpt+1]
//line spl.y:442
		{
			splVAL.union.val = tree.Stat{F: tree.Name(splDollar[1].str), A: tree.Name(splDollar[3].str), As: tree.Name(splDollar[6].str)}
		}
	case 38:
		splDollar = splS[splpt-5 : splpt+1]
//line spl.y:446
		{
			splVAL.union.val = tree.Stat{F: tree.Name(splDollar[1].str), As: tree.Name(splDollar[5].str)}
		}
	case 39:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:450
		{
			splVAL.union.val = tree.Stat{F: tree.Name(splDollar[1].str)}
		}
	case 40:
		splDollar = splS[splpt-4 : splpt+1]
//line spl.y:454
		{
			splVAL.union.val = tree.Stat{F: tree.Name(splDollar[1].str), A: tree.Name(splDollar[3].str)}
		}
	case 41:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:459
		{
			splVAL.union.val = &tree.OrderBy{Orders: splDollar[3].union.orderListStatement(), Limit: nil}
		}
	case 42:
		splDollar = splS[splpt-4 : splpt+1]
//line spl.y:463
		{
			splVAL.union.val = &tree.OrderBy{Limit: splDollar[2].union.valueStatement(), Orders: splDollar[4].union.orderListStatement()}
		}
	case 43:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:468
		{
			splVAL.union.val = tree.OrderList{splDollar[1].union.orderStatement()}
		}
	case 44:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:472
		{
			splVAL.union.val = append(splDollar[1].union.orderListStatement(), splDollar[3].union.orderStatement())
		}
	case 45:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:477
		{
			splVAL.union.val = &tree.Order{
				E:    splDollar[1].union.colunmName(),
				Type: splDollar[2].union.direction(),
			}
		}
	case 46:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:484
		{
			splVAL.union.val = tree.Ascending
		}
	case 47:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:485
		{
			splVAL.union.val = tree.Descending
		}
	case 48:
		splDollar = splS[splpt-0 : splpt+1]
//line spl.y:486
		{
			splVAL.union.val = tree.DefaultDirection
		}
	case 49:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:490
		{
			splVAL.union.val = tree.ExprStatements{splDollar[1].union.exprStatement()}
		}
	case 50:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:491
		{
			splVAL.union.val = append(splDollar[1].union.exprStatements(), splDollar[3].union.exprStatement())
		}
	case 51:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:493
		{
			splVAL.union.val = splDollar[1].union.exprStatement()
		}
	case 52:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:494
		{
			splVAL.union.val = &tree.FuncExpr{Name: "not", Args: tree.ExprStatements{splDollar[2].union.exprStatement()}}
		}
	case 53:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:495
		{
			splVAL.union.val = &tree.FuncExpr{Name: "or", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 54:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:496
		{
			splVAL.union.val = &tree.FuncExpr{Name: "and", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 55:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:497
		{
			splVAL.union.val = splDollar[1].union.exprStatement()
		}
	case 56:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:499
		{
			splVAL.union.val = splDollar[1].union.exprStatement()
		}
	case 57:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:500
		{
			splVAL.union.val = splDollar[1].union.colunmName()
		}
	case 58:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:501
		{
			splVAL.union.val = &tree.FuncExpr{Name: "-", Args: tree.ExprStatements{splDollar[2].union.exprStatement()}}
		}
	case 59:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:502
		{
			splVAL.union.val = &tree.FuncExpr{Name: "+", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 60:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:503
		{
			splVAL.union.val = &tree.FuncExpr{Name: "-", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 61:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:504
		{
			splVAL.union.val = &tree.FuncExpr{Name: "*", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 62:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:505
		{
			splVAL.union.val = &tree.FuncExpr{Name: "/", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 63:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:506
		{
			splVAL.union.val = &tree.FuncExpr{Name: "%", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 64:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:507
		{
			splVAL.union.val = splDollar[1].union.funcStatement()
		}
	case 65:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:509
		{
			splVAL.union.val = &tree.FuncExpr{Name: "<", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 66:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:510
		{
			splVAL.union.val = &tree.FuncExpr{Name: ">", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 67:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:511
		{
			splVAL.union.val = &tree.FuncExpr{Name: "=", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 68:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:512
		{
			splVAL.union.val = &tree.FuncExpr{Name: "<=", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 69:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:513
		{
			splVAL.union.val = &tree.FuncExpr{Name: ">=", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 70:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:514
		{
			splVAL.union.val = &tree.FuncExpr{Name: "<>", Args: tree.ExprStatements{splDollar[1].union.exprStatement(), splDollar[3].union.exprStatement()}}
		}
	case 71:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:516
		{
			splVAL.union.val = splDollar[1].union.valueStatement()
		}
	case 72:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:517
		{
			splVAL.union.val = splDollar[1].union.valueStatement()
		}
	case 73:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:518
		{
			splVAL.union.val = splDollar[1].union.valueStatement()
		}
	case 74:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:519
		{
			splVAL.union.val = &tree.Value{Value: constant.MakeBool(true)}
		}
	case 75:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:520
		{
			splVAL.union.val = &tree.Value{Value: constant.MakeBool(false)}
		}
	case 76:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:521
		{
			splVAL.union.val = &tree.ParenExpr{splDollar[2].union.exprStatement()}
		}
	case 77:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:523
		{
			splVAL.union.val = splDollar[1].union.valueStatement()
		}
	case 78:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:524
		{
			splVAL.union.val = splDollar[2].union.valueStatement()
		}
	case 79:
		splDollar = splS[splpt-2 : splpt+1]
//line spl.y:525
		{
			splVAL.union.val = splDollar[2].union.setNegative()
		}
	case 80:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:528
		{
			splVAL.union.val = splDollar[1].union.funcStatement()
		}
	case 81:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:532
		{
			splVAL.union.val = splDollar[1].union.funcStatement()
		}
	case 82:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:537
		{
			splVAL.union.val = &tree.FuncExpr{Name: splDollar[1].str}
		}
	case 83:
		splDollar = splS[splpt-4 : splpt+1]
//line spl.y:541
		{
			splVAL.union.val = &tree.FuncExpr{Name: splDollar[1].str, Args: splDollar[3].union.exprStatements()}
		}
	case 84:
		splDollar = splS[splpt-6 : splpt+1]
//line spl.y:546
		{
			splVAL.union.val = &tree.FuncExpr{Name: "cast", Args: tree.ExprStatements{splDollar[3].union.exprStatement(), splDollar[5].union.exprStatement()}}
		}
	case 85:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:550
		{
			splVAL.union.val = splDollar[1].union.typeExpr()
		}
	case 86:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:552
		{
			splVAL.union.val = &tree.TypeExpr{Typ: types.New(types.T_int32)}
		}
	case 87:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:553
		{
			splVAL.union.val = &tree.TypeExpr{Typ: types.New(types.T_int64)}
		}
	case 88:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:554
		{
			splVAL.union.val = &tree.TypeExpr{Typ: types.New(types.T_bool)}
		}
	case 89:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:555
		{
			splVAL.union.val = &tree.TypeExpr{Typ: types.New(types.T_float32)}
		}
	case 90:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:556
		{
			splVAL.union.val = &tree.TypeExpr{Typ: types.New(types.T_float64)}
		}
	case 91:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:557
		{
			splVAL.union.val = &tree.TypeExpr{Typ: types.New(types.T_string)}
		}
	case 92:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:560
		{
			splVAL.union.val = tree.ColunmNameList{splDollar[1].union.colunmName()}
		}
	case 93:
		splDollar = splS[splpt-3 : splpt+1]
//line spl.y:564
		{
			splVAL.union.val = append(splDollar[1].union.colunmNameList(), splDollar[3].union.colunmName())
		}
	case 94:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:569
		{
			splVAL.union.val = &tree.TableName{splDollar[1].union.colunmName()}
		}
	case 95:
		splDollar = splS[splpt-1 : splpt+1]
//line spl.y:574
		{
			splVAL.union.val = tree.ColunmName{Path: tree.Name(splDollar[1].str)}
		}
	}
	goto splstack /* stack new state and value */
}
